Template expressions são uma característica da linguagem JavaScript que permite incorporar expressões em strings literais, tornando a concatenação de strings mais legível e flexível. Essa funcionalidade é frequentemente utilizada em linguagens de marcação como HTML, em frameworks como React, Angular e Vue, bem como em outras situações em que é necessário construir strings dinamicamente.

Em JavaScript, as template expressions são criadas usando o template literal, que é delimitado por crases (`´) em vez de aspas simples ou duplas. Além disso, as expressões incorporadas são inseridas dentro da string usando a sintaxe ${expressao}.

Aqui está um exemplo simples de como as template expressions funcionam:


const nome = 'João';
const idade = 25;

// Usando template literals com expressões incorporadas
const mensagem = `Olá, meu nome é ${nome} e tenho ${idade} anos.`;

console.log(mensagem);
// Saída: Olá, meu nome é João e tenho 25 anos.
Neste exemplo, ${nome} e ${idade} são template expressions que são avaliadas e substituídas pelos valores reais durante a criação da string.

No contexto de frameworks como React, as template expressions são frequentemente utilizadas para renderizar dinamicamente dados dentro do código JSX. Por exemplo:

import React from 'react';

const nome = 'Maria';
const idade = 30;

function Saudacao() {
  return (
    <div>
      <p>Olá, meu nome é {nome} e tenho {idade} anos.</p>
    </div>
  );
}

export default Saudacao;
Neste caso, dentro do JSX, as expressões {nome} e {idade} são avaliadas dinamicamente e renderizadas como parte do componente React. Isso ajuda a tornar o código mais expressivo e fácil de entender.